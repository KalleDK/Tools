# Maximum and minimum number of peers to connect to per torrent. 
min_peers = 40 
max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading) 
min_peers_seed = 10 
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent. 
max_uploads = 5

# Global upload and download rate in KiB. "0" for unlimited. 
download_rate = 0 
upload_rate = 0

# Default directory to save the downloaded torrents. 
#directory = ./
directory = $DATA_PATH$/rDownloads

# Default session directory. Make sure you don't run multiple instance 
# of rtorrent using the same session directory. Perhaps using a 
# relative path? 
session = $DATA_PATH$/rSession 

#External ip to tracker
ip = 86.52.123.130

#Port range for listening
port_range = 1984-1984

#Use udp tracker
use_udp_trackers = yes

# Encryption
encryption = allow_incoming,enable_retry,try_outgoing

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
dht = auto

# UDP port to use for DHT.
#
dht_port = 6881

# Enable peer exchange (for torrents not marked private)
#
peer_exchange = yes

# schedule a timer event named 'watch_directory_1':
# 1) triggers 10 seconds after rtorrent starts
# 2) triggers at 10 second intervals thereafter
# 3) Upon trigger, attempt to load (and start) new *.torrent files found in /home/user/torrents/watch/
# 4) set a variable named 'custom1' with the value "/home/user/torrents/complete"
# NOTE: if you do not want it to automatically start the torrent, change 'load_start' to 'load'
schedule = watch_directory_1,10,10,"load_start=$DATA_PATH$/rWatch/movie/*.torrent,d.set_custom1=$DATA_PATH$/rCompleted/movie"
schedule = watch_directory_2,10,10,"load_start=$DATA_PATH$/rWatch/andet/*.torrent,d.set_custom1=$DATA_PATH$/rCompleted/andet"
schedule = watch_directory_3,10,10,"load_start=$DATA_PATH$/rWatch/tv/*.torrent,d.set_custom1=$DATA_PATH$/rCompleted/tv"
schedule = watch_directory_4,10,10,"load_start=$DATA_PATH$/rWatch/nxtgn/*.torrent,d.set_custom1=$DATA_PATH$/rCompleted/nxtgn"

# insert a method with the alias 'checkdirs1'
# 1) returns true if the current path of the torrent data is not equal to the value of custom1
# 2) otherwise, returns false
system.method.insert=checkdirs1,simple,"not=\"$equal={d.get_custom1=,d.get_base_path=}\""

# insert a method with the alias 'movecheck1'
# 1) returns true if all 3 commands return true ('result of checkdirs1' && 'torrent is 100% done', 'custom1 variable is set')
# 2) otherwise, returns false
system.method.insert=movecheck1,simple,"and={checkdirs1=,d.get_complete=,d.get_custom1=}"

# insert a method with the alias 'movedir1'
# (a series of commands, separated by ';') 
# 1) "set path of torrent to equal the value of custom1";
# 2) "mv -u <current data path> <custom1 path>";
# 3) "clear custom1", "stop the torrent","resume the torrent"
# 4) stop the torrent
# 5) start the torrent (to get the torrent to update the 'base path')
system.method.insert=movedir1,simple,"d.stop=;d.set_directory=$d.get_custom1=;execute=mv,$d.get_base_path=,$d.get_custom1=;d.set_custom1=;d.close=;d.erase="

# set a key with the name 'move_hashed1' that is triggered by the hash_done event.
# 1) When hashing of a torrent completes, this custom key will be triggered.
# 2) when triggered, execute the 'movecheck1' method and check the return value.
# 3) if the 'movecheck' method returns 'true', execute the 'movedir1' method we inserted above.
# NOTE-0: *Only* data that has had their hash checked manually with ^R [^R = Control r].
# Or on a rtorrent restart[which initiates a hash check]. Will the data move; ~/torrents/incomplete => ~/torrents/complete for example.
# NOTE-1: 'branch' is an 'if' conditional statement: if(movecheck1){movedir1}
system.method.set_key=event.download.finished,move_hashed1,"branch={$movecheck1=,movedir1=}"
